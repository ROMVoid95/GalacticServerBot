plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'application'
    id 'distribution'
	id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    maven {
        url "https://jitpack.io"
    }
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.erdbeerbaerlp.de/repository/maven-public/" }
}

ext {
	jdatools		= '3.0.1'
	reflections 	= '0.10.2'
	okhttp 			= '5.0.0-alpha.2'
	webhooks 		= '0.8.0'
    guava			= '30.1.1-jre'
    rethink 		= '2.4.4'
	commons			= '2.11.0'
    fasterXmlVersion = '2.13.3'
    dependencies {
        jacksonDatabind     =   {"com.fasterxml.jackson.core:jackson-databind:${fasterXmlVersion}"}
        jacksonCore         =   {"com.fasterxml.jackson.core:jackson-core:${fasterXmlVersion}"}
        jacksonAnnotations  =   {"com.fasterxml.jackson.core:jackson-annotations:${fasterXmlVersion}"}
    }
}

dependencies {
	implementation("net.dv8tion:JDA:5.0.0-alpha.17")
    implementation "com.readonlydev:jdatools:${jdatools}:lite"
	implementation("org.reflections:reflections:${reflections}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("club.minnced:discord-webhooks:${webhooks}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("com.rethinkdb:rethinkdb-driver:${rethink}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("commons-io:commons-io:${commons}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
    implementation 'com.typesafe:config:1.4.1'
    implementation 'es.nitaur.markdown:txtmark:0.16'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'de.ErdbeerbaerLP:toml4j:cf5b4655'
    implementation("de.erdbeerbaerlp:cfcore:1.0.1-SNAPSHOT"){
        changing = true
    }
    implementation 'org.codehaus.groovy:groovy-jsr223:3.0.12'
    implementation 'ch.vorburger.mariaDB4j:mariaDB4j:2.5.3'
    implementation 'mysql:mysql-connector-java:8.0.30'
    
    implementation 'com.vladsch.flexmark:flexmark-html2md-converter:0.64.0'
    
    implementation jacksonCore()
    implementation jacksonDatabind()
    implementation jacksonAnnotations()
    
	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'com.google.code.gson:gson:2.9.0'
	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'ch.qos.logback:logback-classic:1.2.11'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.9'
    
   	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

mainClassName = "com.readonlydev.GalacticBot"
group = 'com.readonlydev'
def ver = new Version(major: 0, minor: 1, revision: 0)
version ver.toString()
description = 'Discord Bot for the Galacticraft Central Server'
applicationName = 'galacticbot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/GalacticBot.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: grgit.head().abbreviatedId
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'GalacticBot.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

jar {
    classifier = 'lite'
}

shadowJar {
    archiveFileName = 'galacticbot.jar'
    classifier = ''
}

distributions {
    shadow {
        distributionBaseName.set('galacticbot')
        contents {
            from "${projectDir}/config"
        }
    }
}

import org.gradle.internal.os.OperatingSystem

def onLinux() {
    OperatingSystem.current().isLinux()
}

task runInstall {
    dependsOn 'installShadowDist'
    
    doLast {
        if(onLinux())
        {
            exec {
                workingDir '.'
                commandLine "ln -s ${buildDir}/install/${applicationName} /opt/${applicationName}"
            }
        }
    }
}

task printDist {
    project.distributions.each {
        println it.name
    }
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
