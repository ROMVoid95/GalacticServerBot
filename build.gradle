plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
	mavenCentral()
}

ext {
	jdatools		= '2.1.1'
	reflections 	= '0.10.2'
	okhttp 			= '5.0.0-alpha.2'
	webhooks 		= '0.8.0'
    guava			= '30.1.1-jre'
    rethink 		= '2.4.4'
	commons			= '2.11.0'
}

dependencies {
    implementation group: 'com.readonlydev', 		name: 'jdatools', 			version: jdatools
	implementation("org.reflections:reflections:${reflections}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("com.squareup.okhttp3:okhttp:${okhttp}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("club.minnced:discord-webhooks:${webhooks}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("com.google.guava:guava:${guava}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("com.rethinkdb:rethinkdb-driver:${rethink}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	implementation("commons-io:commons-io:${commons}") {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	
    
   	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

mainClassName = "com.readonlydev.GalacticBot"
group = 'com.readonlydev'
def ver = new Version(major: 0, minor: 1, revision: 0)
version ver.toString()
description = 'ExampleBot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/GalacticBot.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'GalacticBot.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
