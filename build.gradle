plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
	mavenCentral()
	mavenLocal()
}

configurations {
	dependency
	dependency.exclude group: "org.slf4j", module: "slf4j-api"
	implementation.extendsFrom(dependency)
}

ext {
	jdatools		= '2.1.3'
	reflections 	= '0.10.2'
	okhttp 			= '5.0.0-alpha.2'
	webhooks 		= '0.8.0'
    guava			= '30.1.1-jre'
    rethink 		= '2.4.4'
	commons			= '2.11.0'
}

dependencies {
    implementation group: 'com.readonlydev', name: 'jdatools', 	version: jdatools

	dependency group: 'org.reflections', 		name: 'reflections', 		version: reflections
	dependency group: 'com.squareup.okhttp3', 	name: 'okhttp', 			version: okhttp
	dependency group: 'club.minnced', 			name: 'discord-webhooks', 	version: webhooks
	dependency group: 'com.google.guava', 		name: 'guava', 				version: guava
	dependency group: 'com.rethinkdb', 			name: 'rethinkdb-driver', 	version: rethink
	dependency group: 'commons-io', 			name: 'commons-io', 		version: commons

   	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

mainClassName = "com.readonlydev.GalacticBot"
group = 'com.readonlydev'
def ver = new Version(major: 0, minor: 1, revision: 0)
version ver.toString()
description = 'ExampleBot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/GalacticBot.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'GalacticBot.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
